{"meta":{"title":"Yeliang Xiu'Blog","subtitle":"","description":"","author":"Yeliang Xiu","url":"http://xiuyeliang.com","root":"/"},"pages":[{"title":"archives","date":"2020-04-25T21:44:54.000Z","updated":"2020-04-25T21:51:27.142Z","comments":true,"path":"archives/index.html","permalink":"http://xiuyeliang.com/archives/index.html","excerpt":"","text":""},{"title":"about","date":"2020-04-25T21:40:53.000Z","updated":"2020-04-25T21:51:45.487Z","comments":true,"path":"about/index.html","permalink":"http://xiuyeliang.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-04-25T21:41:20.000Z","updated":"2020-04-25T21:46:43.032Z","comments":true,"path":"categories/index.html","permalink":"http://xiuyeliang.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-25T21:41:09.000Z","updated":"2020-04-25T21:50:59.229Z","comments":true,"path":"tags/index.html","permalink":"http://xiuyeliang.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"阅读《A Survey on Knowledge Graphs-Representation, Acquisition and Applications》-AAAI2020","slug":"知识图谱综述ICLR2020","date":"2020-05-06T09:52:57.000Z","updated":"2020-05-06T10:11:03.171Z","comments":true,"path":"2020/05/06/知识图谱综述ICLR2020/","link":"","permalink":"http://xiuyeliang.com/2020/05/06/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%BB%BC%E8%BF%B0ICLR2020/","excerpt":"","text":"","categories":[{"name":"论文阅读","slug":"论文阅读","permalink":"http://xiuyeliang.com/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"},{"name":"自然语言处理","slug":"论文阅读/自然语言处理","permalink":"http://xiuyeliang.com/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"},{"name":"知识图谱","slug":"论文阅读/自然语言处理/知识图谱","permalink":"http://xiuyeliang.com/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"}],"tags":[]},{"title":"逻辑回归模型","slug":"逻辑回归模型","date":"2020-05-04T02:54:35.000Z","updated":"2020-05-04T13:22:17.226Z","comments":true,"path":"2020/05/04/逻辑回归模型/","link":"","permalink":"http://xiuyeliang.com/2020/05/04/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"1. 线性回归线性回归的表达式： $y(x, w)=w_{0}+w_{1} x_{1}+\\ldots+w_{n} x_{n}$ 2. 逻辑回归2.1逻辑回归的定义线性回归可以预测连续值，但是不能解决分类问题，我们需要根据预测的结果判定其属于正类还是负类。所以逻辑回归就是将线性回归的(−∞,+∞)(−∞,+∞)结果，通过sigmoid函数映射到(0,1)(0,1)之间。 为什么使用sigmoid函数？ 可以对(−∞,+∞)结果，映射到(0,1)之间，作为概率。 $x&lt;0,$ sigmoid$(x)&lt;\\frac{1}{2} ; x&gt;0,$ sigmoid $(x)&gt;\\frac{1}{2}$ ，可以将1/2作为决策边界。 数学特性好，求导容易： $g^{\\prime}(z)=g(z) \\cdot(1-g(z))$ 线性回归决策函数： $h \\theta(x)=\\theta^{T} x$将其通过sigmoid函数，获得逻辑回归的决策函数： $h_{\\theta}(x)=\\frac{1}{1+e^{-\\theta^{T} x}}$逻辑回归可以写成：$P(y=1 | x ; \\theta)=h_{\\theta}(x)$$P(y=0 | x ; \\theta)=1-h_{\\theta}(x)$然后可以写成统一的形式：$p(y | x ; \\theta)=\\left(h_{\\theta}(x)\\right)^{y}\\left(1-h_{\\theta}(x)\\right)^{1-y}$ 2.2逻辑回归损失函数由最大似然估计原理，我们可以通过m个训练样本值，来估计出值，使得似然函数值（所有样本的似然函数之积）最大：$\\begin{aligned} L(\\theta) &amp;=p(\\vec{y} | X ; \\theta) \\ &amp;=\\prod_{i=1}^{m} p\\left(y^{(i)} | x^{(i)} ; \\theta\\right) \\ &amp;=\\prod_{i=1}^{m}\\left(h_{\\theta}\\left(x^{(i)}\\right)\\right)^{y^{(i)}}\\left(1-h_{\\theta}\\left(x^{(i)}\\right)\\right)^{1-y^{(i)}} \\end{aligned}$求log：$\\begin{aligned} \\ell(\\theta) &amp;=\\log L(\\theta) \\ &amp;=\\sum_{i=1}^{m} y^{(i)} \\log h\\left(x^{(i)}\\right)+\\left(1-y^{(i)}\\right) \\log \\left(1-h\\left(x^{(i)}\\right)\\right) \\end{aligned}$取负数，得损失函数：$J(\\theta)=\\frac{1}{m} \\sum_{i=1}^{n} \\operatorname{cost}\\left(h_{\\theta}\\left(x_{i}\\right), y_{i}\\right)=-\\frac{1}{m}\\left[\\sum_{i=1}^{n} y_{i} \\log h_{\\theta}\\left(x_{i}\\right)+\\left(1-y_{i}\\right) \\log \\left(1-h_{\\theta}\\left(x_{i}\\right)\\right)\\right]$ Question: 为什么逻辑回归采用似然函数，而不是平方损失函数？ 最小二乘的损失函数是非凸函数。没有全局最优解。 Reference https://blog.csdn.net/jiaoyangwm/article/details/81139362 https://blog.csdn.net/ddydavie/article/details/82668141","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"线性回归与逻辑回归","slug":"机器学习/线性回归与逻辑回归","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"}],"tags":[]},{"title":"隐马尔可夫模型","slug":"隐马尔可夫模型‘","date":"2020-05-03T13:33:59.000Z","updated":"2020-05-04T02:33:29.970Z","comments":true,"path":"2020/05/03/隐马尔可夫模型‘/","link":"","permalink":"http://xiuyeliang.com/2020/05/03/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B%E2%80%98/","excerpt":"","text":"1. 马尔科夫过程在已知的目前状态条件下，它未来的演变不依赖于它以往的演变。马尔科夫过程包括一个初始向量和一个状态转移矩阵。 2. 马尔科夫链时间和状态都是离散的马尔科夫过程称为马尔科夫链。 3. 隐马尔可夫模型3.1 概述在某些情况下马尔科夫过程不足以描述我们希望发现的模式。譬如，一个隐居的人可能不能直观的观察到天气的情况，但是有一些海藻。民间的传说告诉我们海藻的状态在某种概率上是和天气的情况相关的。在这种情况下我们有两个状态集合，一个可以观察到的状态集合（海藻的状态）和一个隐藏的状态（天气的状况）。我们希望能找到一个算法可以根据海藻的状况和马尔科夫假设来预测天气的状况。 其中，隐藏状态的数目和可以观察到的状态的数目可能是不一样的。在语音识别中，一个简单的发言也许只需要80个语素来描述，但是一个内部的发音机制可以产生不到80或者超过80种不同的声音。同理，在一个有三种状态的天气系统（sunny、cloudy、rainy）中，也许可以观察到四种潮湿程度的海藻（dry、dryish、damp、soggy）。在此情况下，可以观察到的状态序列和隐藏的状态序列是概率相关的。于是我们可以将这种类型的过程建模为一个隐藏的马尔科夫过程和一个和这个马尔科夫过程概率相关的并且可以观察到的状态集合。 3.2 隐马尔科夫3.2.1 隐马尔可夫模型表示HMM由隐含状态S,可观测状态O,初始状态概率矩阵pi,隐含状态概率转移矩阵A，可观测转移矩阵B（发射矩阵）组成。pi和A决定了状态序列，B决定了观测序列，因此，HMM可以由三元符号表示：$\\lambda=(A, B, \\pi)$ 3.2.2 HMM的二个性质 齐次假设-假设t时刻与t-1之前的所有状态和观测是独立的。$P\\left(i_{t} | i_{t-1}, o_{t-1}, i_{t-2}, o_{t-2} \\cdots i_{1}, o_{1}\\right)=P\\left(i_{t} | i_{t-1}\\right)$ 观测独立性假设-t时刻的观测ot与t时刻之前的所有状态和观测是独立的。$P\\left(o_{t} | i_{T}, o_{T}, i_{T-1}, o_{T-1} \\cdots i_{1}, o_{1}\\right)=P\\left(o_{t} | i_{t}\\right)$HMM的三个问题 概率计算问题：给定模型 $\\lambda=(A, B, \\pi)$ 和观测序列 $O={O_1,O_2,O_3 \\dots}$ ，计算在模型 $\\lambda$ 下观测 $O$ 出现的概率 $P(O|\\lambda)$ .（解决算法–&gt;前向-后向算法（动态规划））。 学习问题：已知观测序列 $O={O_1,O_2,O_3 \\dots}$ ，估计模型 $\\lambda=(A, B, \\pi)$ 的参数，使得在该参数下该模型的观测序列 $P(O|\\lambda)$ 最大。（解决算法–Baum-Welch算法-EM算法）。 预测问题（解码问题）：已知模型 $\\lambda=(A, B, \\pi)$ 和观测序列 $O={O_1,O_2,O_3 \\dots}$ ，求给定观测序列条件概率 $P(I|O,\\lambda)$ 最大的状态序列 $I$ 。 Reference https://www.cnblogs.com/pinking/p/8531405.html https://blog.csdn.net/z2536083458/article/details/99696875","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"隐马尔可夫模型","slug":"机器学习/隐马尔可夫模型","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/"}],"tags":[]},{"title":"维特比(Viterbi)算法及python实现","slug":"维特比算法及实现","date":"2020-05-03T08:30:19.000Z","updated":"2020-05-03T10:02:50.679Z","comments":true,"path":"2020/05/03/维特比算法及实现/","link":"","permalink":"http://xiuyeliang.com/2020/05/03/%E7%BB%B4%E7%89%B9%E6%AF%94%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"1. 维特比算法维特比算法是一种动态规划苏算法，可用于最可能产生观测时间序列的-维特比路径-隐含状态序列，特别是在马尔可夫信息源上下文和隐马尔可夫模型中。 在计算机科学领域中，动态规划的思想解决的最基本的一个问题是：寻找有向图无环图当中二个点之间的最短路径（实际应用于语音识别，词性标注，分词等） 2. 例子如下图所示，求S-&gt;E的最短路径， 最简单的事穷举法，把所有可能的路径都举出来，即$444=64$ 种可能。 基于动态规划的方式来寻找最佳路径：思想是把大的问题细分为多个小的问题，基于每一步的结果再去寻找下一步的策略，通过每一步走过之后的局部最优去寻找全局最优，以下是具体做法： step 1: 从点S出发，对于第一层的4个节点，算出他们的距离 d(S,A1)，d(S,A2),d(S,A3),d(S,A4),因为只有一步，所以这些距离都是S到他们的最短距离。 step 2: 对于B层的所有节点(B1,B2,B3,B4),要计算出S到他们的最短距离。我们知道，对于特定的节点B2，从S到它的路径可以经过A层的任何一个节点(A1,A2,A3,A4)。对应的路径长就是d(S,B2)=d(S,Ai)+d(Ai,B2)（其中i=1，2，3，4）。由于A层有4个节点（即i有4个取值），我们要一一计算，然后找到最小值。这样，对于B层的每个节点，都需要进行4次运算，而B层有4个节点，所以共有 $4*4=16$ 次运算。 step 3: 这一步是该算法的核心。我们从step2计算得出的阶段结果只保留4个最短路径值（每个节点保留一个）。那么，若从B层走向C层来说，该步骤的级数已经不再是 16 ，而是变成4！也就是说，从B层到C层的最短路径只需要基于B层得出的4个结果来计算。这种方法一直持续到最后一个状态，每一步计算的复杂度为相邻两层的计算复杂度为 16的正比！再通俗点说，连接着两两相邻层的计算符合变成了+号，取代了原先的 * 号。用这种方法，只需要进行32 次计算！ 上述就是著名的维特比算法，若假设整个网络的宽度为D，网格长度为N，那么穷举法的时间复杂度为 $O(D^N)$ , 而维特比算法的时间复杂度为 $O(ND^2)$. python实现以词性标注为例，利用维特比算法对一个句子的词性进行标注。 123456789101112131415161718192021222324252627282930313233343536373839404142import numpy as np#第一个参数表示转移概率矩阵 $ P(Z_i|Z_&#123;i-1&#125;)$,第二个参数表示发射概率$P(W_i|Z_i)$,第三个参数表示隐藏变量Z的初始概率 $P(Z_i)$,第四个参数表示要标注的句子对像。def viterbi(trainsition_probability,emission_probability,pi,obs_seq): #转换为矩阵进行运算 trainsition_probability=np.array(trainsition_probability) emission_probability=np.array(emission_probability) pi=np.array(pi) obs_seq = [0, 2, 3] #句子中的词在词库中的下标位置 # 最后返回一个Row*Col的矩阵结果 Row = np.array(trainsition_probability).shape[0]#获取词性的个数 Col = len(obs_seq)#获取句子中词的个数 #定义要返回的矩阵，即动态规划中需要维护的矩阵，计算矩阵中的每一个元素值 F=np.zeros((Row,Col))#行数代表词的个数，列数代表词性的种类 #初始状态F[:,0]=pi*np.transpose(emission_probability[:,obs_seq[0]]) for t in range(1,Col):#针对每一列 list_max=[] for n in range(Row):#遍历每一行 list_x=list(np.array(F[:,t-1])*np.transpose(trainsition_probability[:,n])) #获取最大概率 list_p=[] for i in list_x: list_p.append(i*10000) list_max.append(max(list_p)/10000) F[:,t]=np.array(list_max)*np.transpose(emission_probability[:,obs_seq[t]]) return Fif __name__=='__main__': #隐藏状态 invisible=['Sunny','Cloud','Rainy'] #初始状态 pi=[0.63,0.17,0.20] #转移矩阵 trainsion_probility=[[0.5,0.375,0.125],[0.25,0.125,0.625],[0.25,0.375,0.375]] #发射矩阵 emission_probility=[[0.6,0.2,0.15,0.05],[0.25,0.25,0.25,0.25],[0.05,0.10,0.35,0.5]] #最后显示状态 obs_seq=[0,2,3] #最后返回一个Row*Col的矩阵结果 F=viterbi(trainsion_probility,emission_probility,pi,obs_seq) print(F) Reference https://www.cnblogs.com/zhibei/p/9391014.html","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"维特比算法及其实现","slug":"机器学习/维特比算法及其实现","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%B4%E7%89%B9%E6%AF%94%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/"}],"tags":[]},{"title":"朴素贝叶斯简介(Nave Bayes)","slug":"朴素贝叶斯简介","date":"2020-05-02T10:11:31.000Z","updated":"2020-05-06T12:31:53.517Z","comments":true,"path":"2020/05/02/朴素贝叶斯简介/","link":"","permalink":"http://xiuyeliang.com/2020/05/02/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%80%E4%BB%8B/","excerpt":"","text":"1. 前言1.1 条件概率（conditional probability）$P(A | B)=\\frac{P(A B)}{P(B)}$ 1.2 贝叶斯定理$P(Y | X)=\\frac{P(X | Y) P(Y)}{P(X)}$贝叶斯定理之所以有用，是因为我们在生活中经常遇到这种情况，我们可以很容易直接得出 $P(X | Y)$ ，$P(Y | X)$则很难得出，但我们更关心 $P(Y | X)$ ，则贝叶斯定理就为我们打通从$P(X | Y)$ 到 $P(Y | X)$ 的道路。 2. 朴素贝叶斯分类朴素贝叶斯的思想基础是：对于给出的待分类项，求解在此出现的条件下各个类别出现的概率，哪个最大，就认为此待分类项属于哪个类别。朴素贝叶斯属于生成模型：生成式模型由数据学习联合分布 $P(X,Y)$ ,然后求出条件概率分布 $P(Y | X)$ 作为预测模型。常见的生成模型有：朴素贝叶斯模型，隐马尔科夫模型，生成对抗网络，变分自动编码器。注：判别模型：由判别方法学习到的模型称之为判别模型，判别方法是由数据直接学习决策函数或者条件概率分布 $P(Y | X)$ 作为预测的模型。 2.1 朴素贝叶斯步骤 设 $x={a_{1}, a_{2}, \\dots, a_{m}}$ 为一个待分类项，而每个a为x的一个特征属性。 有类别集合 $C={y_{1}, y_{2}, \\dots, y_{n}}$ 计算 $P(y_{1} | x), P(y_{2} | x), \\dots, P(y_{n} | x)$ 如果 $P(y_{k} | x)=\\max {P(y_{1} | x), P(y_{2} | x), \\dots, P(y_{n} | x)}$ ，则 $x \\in y_{k}$。那么关键是如何计算第3步中的各个条件概率。 找到一个已知分类的待分类项集合，这个集合叫做训练样本集 统计得到在各类别下各个特征的条件概率估计，即： $P\\left(a_{1} | y_{1}\\right), P\\left(a_{2} | y_{1}\\right), \\dots, P\\left(a_{m} | y_{1}\\right) ; P\\left(a_{1} | y_{2}\\right), P\\left(a_{2} | y_{2}\\right), \\dots, P\\left(a_{m} | y_{2}\\right) ; \\dots ; P\\left(a_{1} | y_{n}\\right), P\\left(a_{2} | y_{n}\\right), \\dots, P\\left(a_{m} | y_{n}\\right)$ 如果各个特征属性是条件独立的，则根据贝叶斯定理有如下推导：$P\\left(y_{i} | x\\right)=\\frac{P\\left(x | y_{i}\\right) P\\left(y_{i}\\right)}{P(x)}$因为分母对于所有类别为常数，因为我们只要将分子最大化即可，又因为各特征属性是条件独立的，所以有： $P\\left(x | y_{i}\\right) P\\left(y_{i}\\right)=P\\left(a_{1} | y_{i}\\right) P\\left(a_{2} | y_{i}\\right) \\dots P\\left(a_{m} | y_{i}\\right) P\\left(y_{i}\\right)=P\\left(y_{i}\\right) \\prod_{j=1}^{m} P\\left(a_{j} | y_{i}\\right)$根据上述分析，朴素贝叶斯分类的流程如下图所示： 关于 $P(y_{i}), P(a_{j} | y_{i})$ 的求解，有以下三种模型： 多项式模型–当特征是离散的时候，使用多项式模型。多项式模型在计算先验概率 $P(y_{i})$和条件概率 $P(a_{j} | y_{i})$ 时，会做一些平滑处理。 高斯模型–当特征是连续变量的时候，运用多项式模型就会导致很多 $P(a_{j} | y_{i})=0$ 不做平滑的情况下），此时即使做平滑，所得到的条件概率也难以描述真实情况。所以处理连续的特征变量，应该采用高斯模型。 伯努利模型–与多项式模型一样，伯努利模型适用于离散特征的情况，所不同的是，伯努利模型中每个特征的取值只能是1和0(以文本分类为例，某个单词在文档中出现过，则其特征值为1，否则为0).伯努利模型中，条件概率 $P(a_{j} | y_{i})$ 的计算方式是：当特征值 $a_i$ 为1时: $P(a_{j} | y_{i})=P(a_{j}=1 | y_{i})$当特征值 $a_i$ 为0时: $P(a_{j} | y_{i})=1-P(a_{j}=1 | y_{i})$ Reference https://blog.csdn.net/guoyunfei20/article/details/78911721 https://blog.csdn.net/u012162613/article/details/48323777 https://www.jianshu.com/p/7b673057ab9a","categories":[{"name":"机器学习","slug":"机器学习","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"朴素贝叶斯","slug":"机器学习/朴素贝叶斯","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"}],"tags":[]},{"title":"深入理解语言模型","slug":"语言模型","date":"2020-05-02T01:24:05.000Z","updated":"2020-05-02T07:23:58.813Z","comments":true,"path":"2020/05/02/语言模型/","link":"","permalink":"http://xiuyeliang.com/2020/05/02/%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"1. 语言模型定义对于语言序列$(W_1,W_2,W_3,…,W_i) $语言模型就是计算该序列的概率。通俗理解：即判断一个语言序列是否是正常语句，即是否是人话$ P(I Love U)&gt; P(Love I U)$. 2. 统计语言模型2.1 n-gram语言模型的基本知识首先，由链式法则可以的得到，$ P(w_1,w_2,…,w_n)=P(w_1)P(w_2|w_1)…P(w_n|w_1,..,w_{n-1})$在统计语言模型中，采用极大似然估计来计算每个词出现的条件概率，即$\\begin{aligned} P\\left(w_{i} | w_{1}, \\ldots, w_{i-1}\\right) &amp;=\\frac{C\\left(w_{1}, w_{2}, \\ldots, w_{i}\\right)}{\\sum_{w} C\\left(w_{1}, w_{2}, \\ldots w_{i-1}, w\\right)} \\ &amp; \\stackrel{?}{=} \\frac{C\\left(w_{1}, w_{2}, \\ldots, w_{i}\\right)}{C\\left(w_{1}, w_{2}, \\ldots w_{i-1}\\right)} \\end{aligned}$其中，$C(.)$表示子序列在训练集中出现的次数。但是对于任意长的自然语言语句，根据极大似然估计直接计算$P\\left(w_{i} | w_{1}, \\ldots, w_{i-1}\\right)$显然不现实。为了解决这个问题，引入了马尔可夫假设（Markov assumption）,即假设当前词出现的概率只依赖于前n-1个词，可以得到：$P\\left(w_{i} | w_{1}, w_{2}, \\dots, w_{i-1}\\right)=P\\left(w_{i} | w_{i-n+1}, \\dots, w_{i-1}\\right)$ 基于上式，定义n-gram 语言模型如下： n=1 (unigram) $P\\left(w_{1}, w_{2}, \\ldots, w_{n}\\right)=\\prod_{i=1}^{n} P\\left(w_{i}\\right)$ n=2 (bigram) $P\\left(w_{1}, w_{2}, \\dots, w_{n}\\right)=\\prod_{i=1} P\\left(w_{i} | w_{i-1}\\right)$ n=3 (trigram) $P\\left(w_{1}, w_{2}, \\ldots, w_{n}\\right)=\\prod_{i=1}^{n} P\\left(w_{i} | w_{i-2}, w_{i-1}\\right)$ 其中，当n&gt;1时，为了使句首词的条件概率有意思，需要给原序列加上一个或多个启始符。其作用是为了表征句首词出现的条件概率。 结论 当不加结束符时，n-gram语言模型只能分别对所有固定长度的序列进行概率分布建模，而不是任意长度的序列。 出现这个现象的原因在于，上述极大似然估计的第二个等式只有在序列包含结束符的时候才成立。 2.2 n-gram语言中的平滑技术 Add-one Smoothing(Laplace Smoothing) Add-K Smoothing Interpolation 核心思路：在计算tri-gram的时候同时考虑Uni-gram,bi-gram,tri-gram出现的频率。 Good-Turing Smoothing 2.3 n-gram语言模型小结优点： 采样极大似然估计，参数易训练； 完全包含了q前n-1个词的全部信息； 解释性强，直观易理解。缺点 缺乏啊长期依赖，只能建模到前n-1个词。 随着n的增大，参数空间呈指数增长 数据稀疏，难免会出现OOV的问题 单纯的基于统计频次，泛化能力差。 3. 神经网络语言模型神经网络语言模型可以看作是在给定一个序列的前提下，预测下一个词出现的概率，$P\\left(w_{i} | w_{1}, \\dots, w_{i-1}\\right)$，不论n-gram中的n怎么取都是对上式的近似。 3.1 基于前馈神经网络的语言模型Bengio[2]在这篇文中提出了如下的前馈神经网络结构（NNLM）。与传统的估计$P\\left(w_{i} | w_{1}, \\dots, w_{i-1}\\right)$不同，NNLM模型直接通过神经网络结构对n元条件概率进行建模，NNLM结构如下。 3.1.1模型输入每次从语料库中滑动4个数据形成一个样本，将其中三个词转为one-hot编码形式，将三个one-hot形式作为输入喂入网络。这里用V表示所有单词的集合（即词典），$V_i$表示词典中的第i个单词。 3.1.2 模型参数NNLM的目标是训练如下模型：$f\\left(w_{t}, w_{t-1}, \\ldots, w_{t-n+2}, w_{t-n+1}\\right)=p\\left(w_{t} | w_{1}^{t-1}\\right)$其中$W_i$ 表示词序列中第t个单词，$w^{t-1}_{1}$表示从第一个词到第t个词组成的子序列。模型需要满足的约束是： 概率大于0 $f\\left(w_{t}, w_{t-1}, \\ldots, w_{t-n+2}, w_{t-n+1}\\right)&gt;0$ 模型输出的一个向量，该向量的每一个分量依次对应下一个词为词典中某个词的概率。所以｜V｜中一定有一个最大的概率。 $\\sum_{i}^{|V|} f\\left(w_{t}, w_{t-1}, \\dots, w_{t-n+2}, w_{t-n+1}\\right)=1$ 模型的传播过程可以分为二部分：特征映射和计算条件概率二部分。 特征映射： 通过映射矩阵 $C \\in R^{|V| \\times m}$ 将输入的每一个词映射为一个特征向量，$C(i) \\in R^{m}$ 表示词典中第i个词对应的特征向量，其中m表示特征向量的维度。然后将通过特征映射得到 $C\\left(w_{t-n+1}\\right), \\dots, C\\left(w_{t-1}\\right)$ 合并成一个(n-1)m维的向量 $\\left(C\\left(w_{t-n+1}\\right), \\dots, C\\left(w_{t-1}\\right)\\right)$ ，因为每一个词是m维，总共有n-1个词，所以共有(n-1)m维。 计算条件概率分布：通过一个函数g(g是前馈或者递归神经网络)将输入的词向量序列 $\\left(C\\left(w_{t-n+1}\\right), \\dots, C\\left(w_{t-1}\\right)\\right)$ 转化成一个概率分布 $y \\in R^{|V|}$ ，这里的输出是|V|维的，和词典的维度是相同的。 3.1.3 总结NNLM模型使用了低维紧凑的词向量对上文进行表示，这解决了词袋模型带来的数据稀疏，语义鸿沟等问题。并且在相似的上下文语境中，NNLM模型可以预测出相似的目标词，而传统模型无法做到这一点。 Reference https://mp.weixin.qq.com/s/yQbcQJpFiniZYuulsHVv2Q http://jmlr.org/papers/volume3/bengio03a/bengio03a.pdf https://blog.csdn.net/lilong117194/article/details/82018008?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1","categories":[{"name":"自然语言处理","slug":"自然语言处理","permalink":"http://xiuyeliang.com/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"},{"name":"深入理解语言模型","slug":"自然语言处理/深入理解语言模型","permalink":"http://xiuyeliang.com/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"}],"tags":[]},{"title":"认知心理学-第二章《知觉》概要","slug":"知觉","date":"2020-04-30T05:59:05.000Z","updated":"2020-04-30T09:23:04.039Z","comments":true,"path":"2020/04/30/知觉/","link":"","permalink":"http://xiuyeliang.com/2020/04/30/%E7%9F%A5%E8%A7%89/","excerpt":"","text":"视觉模式识别模板匹配模型1模板匹配是通过将刺激（样本特征）与模板进行匹配来识别物体的一种方法。但是一旦对原始样本进行扰动的话，则匹配效果就很差。 特征分析1特征分析首先识别构成模式（样本）的各个特征，然后将其进行组合。 言语识别言语的特征分析1以音素为例，音素识别的依据是音素产生过程中的特征，例如发音部位和浊音音质。 情景与模式识别知觉中的一个普遍问题是，这种自上而下加工(情景上下文)与不考虑整体情景而直接对信息本身进行的自下而上加工（样本本身的特征）是如何结合的？比如在字母识别问题中，单词情景可以用来补充特征信息。最后，在马萨罗FLMP模型中指出，情景信息与刺激信息各自独立地提供信息，共同决定知觉到的模式。","categories":[{"name":"书籍","slug":"书籍","permalink":"http://xiuyeliang.com/categories/%E4%B9%A6%E7%B1%8D/"},{"name":"认知心理学","slug":"书籍/认知心理学","permalink":"http://xiuyeliang.com/categories/%E4%B9%A6%E7%B1%8D/%E8%AE%A4%E7%9F%A5%E5%BF%83%E7%90%86%E5%AD%A6/"}],"tags":[]}],"categories":[{"name":"论文阅读","slug":"论文阅读","permalink":"http://xiuyeliang.com/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"},{"name":"自然语言处理","slug":"论文阅读/自然语言处理","permalink":"http://xiuyeliang.com/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"},{"name":"知识图谱","slug":"论文阅读/自然语言处理/知识图谱","permalink":"http://xiuyeliang.com/categories/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"},{"name":"机器学习","slug":"机器学习","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"线性回归与逻辑回归","slug":"机器学习/线性回归与逻辑回归","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"},{"name":"隐马尔可夫模型","slug":"机器学习/隐马尔可夫模型","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/"},{"name":"维特比算法及其实现","slug":"机器学习/维特比算法及其实现","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BB%B4%E7%89%B9%E6%AF%94%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/"},{"name":"朴素贝叶斯","slug":"机器学习/朴素贝叶斯","permalink":"http://xiuyeliang.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"},{"name":"自然语言处理","slug":"自然语言处理","permalink":"http://xiuyeliang.com/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"},{"name":"深入理解语言模型","slug":"自然语言处理/深入理解语言模型","permalink":"http://xiuyeliang.com/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"},{"name":"书籍","slug":"书籍","permalink":"http://xiuyeliang.com/categories/%E4%B9%A6%E7%B1%8D/"},{"name":"认知心理学","slug":"书籍/认知心理学","permalink":"http://xiuyeliang.com/categories/%E4%B9%A6%E7%B1%8D/%E8%AE%A4%E7%9F%A5%E5%BF%83%E7%90%86%E5%AD%A6/"}],"tags":[]}